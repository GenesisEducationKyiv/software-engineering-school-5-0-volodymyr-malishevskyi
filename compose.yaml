services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - 3000:3000
    env_file:
      - path: .env
        required: false
    environment:
      PORT: 3000
      APP_URL: http://localhost:9000
      DATABASE_URL: postgresql://${DB_USER}:${DB_PASSWORD}@db:5432/${DB_NAME}?schema=public
      WEATHER_SERVICE_URL: http://weather-service:3000
      WEATHER_SERVICE_GRPC_URL: weather-service:50051
      COMMUNICATION_PROTOCOL: grpc
      
      # Event Bus configuration
      EVENT_BUS_PROVIDER: redpanda
      REDPANDA_BROKERS: '["redpanda:9092"]'
      REDPANDA_CLIENT_ID: weather-backend
      REDPANDA_GROUP_ID: weather-backend-group

      SMTP_FROM: ${SMTP_FROM}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
    depends_on:
      db:
        condition: service_healthy
      weather-service:
        condition: service_started
      redpanda:
        condition: service_healthy
  weather-service:
    build:
      context: ./weather
      dockerfile: Dockerfile
    ports:
      - 3001:3000
      - 50051:50051
    env_file:
      - path: .env
        required: false
    environment:
      PORT: 3000
      GRPC_PORT: 50051

      WEATHER_API_KEY: ${WEATHER_API_KEY}
      CACHE_TYPE: redis
      REDIS_URL: redis://redis:6379
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3001/api/v1/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 15s

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - VITE_API_URL=http://localhost:3000
    ports:
      - 9000:80
    depends_on:
      - backend
  db:
    image: postgres:17
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - 5434:5432
    volumes:
      - weather_db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
  
  redis:
    image: redis:latest
    ports:
      - 6379:6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
  
  redpanda:
    image: redpandadata/redpanda:latest
    command:
      - redpanda
      - start
      - --kafka-addr
      - internal://0.0.0.0:9092,external://0.0.0.0:19092
      - --advertise-kafka-addr
      - internal://redpanda:9092,external://localhost:19092
      - --pandaproxy-addr
      - internal://0.0.0.0:8082,external://0.0.0.0:18082
      - --advertise-pandaproxy-addr
      - internal://redpanda:8082,external://localhost:18082
      - --schema-registry-addr
      - internal://0.0.0.0:8081,external://0.0.0.0:18081
      - --rpc-addr
      - redpanda:33145
      - --advertise-rpc-addr
      - redpanda:33145
      - --smp
      - '1'
      - --memory
      - '1G'
      - --mode
      - dev-container
      - --default-log-level=info
    ports:
      - "18081:18081"  # Schema Registry
      - "18082:18082"  # REST Proxy
      - "19092:19092"  # Kafka API
      - "19644:9644"   # Admin API
    healthcheck:
      test: ["CMD-SHELL", "rpk cluster health | grep -E 'Healthy:.+true' || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s
  
  redpanda-console:
    image: docker.redpanda.com/redpandadata/console:latest
    container_name: redpanda-console
    ports:
      - 8081:8080
    environment:
      KAFKA_BROKERS: redpanda:9092 
      KAFKA_SCHEMA_REGISTRY_URL: http://redpanda:8081 
    depends_on:
      - redpanda

  prometheus:
    image: prom/prometheus:latest
    ports:
      - 9090:9090
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'

volumes:
  weather_db_data: